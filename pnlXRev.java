/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package handyXMLTool;

import javax.swing.JTree;
import java.io.File;
import java.io.IOException;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.TransformerException;
import org.w3c.dom.Element;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;





/**
 *
 * @author Ken Keller
 */
public class pnlXRev extends javax.swing.JPanel {

    XReview xRev = new XReview();
    
    /**
     * Creates new form pnlXRev
     */
    public pnlXRev() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlStatus = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        pnlLayers = new javax.swing.JLayeredPane();
        pnlFileSelector = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtFilename = new javax.swing.JTextField();
        cmdGo = new javax.swing.JButton();
        cmdGetSource = new javax.swing.JButton();
        cmdGetFields = new javax.swing.JButton();
        pnlTextSearch = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlXML = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtXML = new javax.swing.JTree();
        pnlCreate = new javax.swing.JPanel();
        pnlSchema = new javax.swing.JPanel();
        pnlSND = new javax.swing.JPanel();
        oldText = new javax.swing.JTextField();
        newText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmdSND = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();

        lblStatus.setText("xReview - another quality project by Ken Keller");

        javax.swing.GroupLayout pnlStatusLayout = new javax.swing.GroupLayout(pnlStatus);
        pnlStatus.setLayout(pnlStatusLayout);
        pnlStatusLayout.setHorizontalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 921, Short.MAX_VALUE)
            .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatusLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlStatusLayout.setVerticalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
            .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatusLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jLabel1.setText("Filename:");

        cmdGo.setText("Go");
        cmdGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGoActionPerformed(evt);
            }
        });

        cmdGetSource.setText("Load Source");
        cmdGetSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGetSourceActionPerformed(evt);
            }
        });

        cmdGetFields.setText("Get Fields");
        cmdGetFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGetFieldsActionPerformed(evt);
            }
        });

        pnlTextSearch.setEnabled(false);
        pnlTextSearch.setPreferredSize(new java.awt.Dimension(933, 68));

        javax.swing.GroupLayout pnlTextSearchLayout = new javax.swing.GroupLayout(pnlTextSearch);
        pnlTextSearch.setLayout(pnlTextSearchLayout);
        pnlTextSearchLayout.setHorizontalGroup(
            pnlTextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );
        pnlTextSearchLayout.setVerticalGroup(
            pnlTextSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlFileSelectorLayout = new javax.swing.GroupLayout(pnlFileSelector);
        pnlFileSelector.setLayout(pnlFileSelectorLayout);
        pnlFileSelectorLayout.setHorizontalGroup(
            pnlFileSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFileSelectorLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(pnlTextSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(cmdGo)
                .addGap(33, 33, 33)
                .addComponent(cmdGetFields)
                .addGap(41, 41, 41)
                .addComponent(cmdGetSource)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        pnlFileSelectorLayout.setVerticalGroup(
            pnlFileSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFileSelectorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFileSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTextSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFileSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmdGo)
                        .addComponent(cmdGetSource)
                        .addComponent(cmdGetFields)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jtXML);

        javax.swing.GroupLayout pnlXMLLayout = new javax.swing.GroupLayout(pnlXML);
        pnlXML.setLayout(pnlXMLLayout);
        pnlXMLLayout.setHorizontalGroup(
            pnlXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 904, Short.MAX_VALUE)
            .addGroup(pnlXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlXMLLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(24, Short.MAX_VALUE)))
        );
        pnlXMLLayout.setVerticalGroup(
            pnlXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
            .addGroup(pnlXMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlXMLLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("XML", pnlXML);

        javax.swing.GroupLayout pnlCreateLayout = new javax.swing.GroupLayout(pnlCreate);
        pnlCreate.setLayout(pnlCreateLayout);
        pnlCreateLayout.setHorizontalGroup(
            pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 904, Short.MAX_VALUE)
        );
        pnlCreateLayout.setVerticalGroup(
            pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Create", pnlCreate);

        javax.swing.GroupLayout pnlSchemaLayout = new javax.swing.GroupLayout(pnlSchema);
        pnlSchema.setLayout(pnlSchemaLayout);
        pnlSchemaLayout.setHorizontalGroup(
            pnlSchemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 904, Short.MAX_VALUE)
        );
        pnlSchemaLayout.setVerticalGroup(
            pnlSchemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Schema", pnlSchema);

        jLabel2.setText("Old Text:");

        jLabel3.setText("Replace With:");

        cmdSND.setText("Replace");
        cmdSND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSNDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSNDLayout = new javax.swing.GroupLayout(pnlSND);
        pnlSND.setLayout(pnlSNDLayout);
        pnlSNDLayout.setHorizontalGroup(
            pnlSNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSNDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlSNDLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(newText, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlSNDLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(oldText, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSNDLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmdSND)
                .addGap(165, 165, 165))
        );
        pnlSNDLayout.setVerticalGroup(
            pnlSNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSNDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oldText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(31, 31, 31)
                .addGroup(pnlSNDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(49, 49, 49)
                .addComponent(cmdSND)
                .addContainerGap(282, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ReplaceText", pnlSND);

        jTextField2.setText("jTextField1");

        javax.swing.GroupLayout pnlLayersLayout = new javax.swing.GroupLayout(pnlLayers);
        pnlLayers.setLayout(pnlLayersLayout);
        pnlLayersLayout.setHorizontalGroup(
            pnlLayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLayersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFileSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(120, 120, 120))
            .addGroup(pnlLayersLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlLayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlLayersLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 909, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(131, Short.MAX_VALUE)))
        );
        pnlLayersLayout.setVerticalGroup(
            pnlLayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLayersLayout.createSequentialGroup()
                .addComponent(pnlFileSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 393, Short.MAX_VALUE))
            .addGroup(pnlLayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlLayersLayout.createSequentialGroup()
                    .addGap(101, 101, 101)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlLayers.setLayer(pnlFileSelector, javax.swing.JLayeredPane.PALETTE_LAYER);
        pnlLayers.setLayer(jTabbedPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlLayers.setLayer(jTextField2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
            .addComponent(pnlLayers)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlLayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private Document xDoc;
            
    
    private void cmdGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGoActionPerformed
        // display the contents of the file specified in the JTree object 
       
        // start with a folder and get all of the files within 
        
        Document xDoc = xmlFileMgr.openXMLFile(txtFilename.getText());
        if (xDoc == null) {
           lblStatus.setText(xmlFileMgr.getError());
        } else {
            lblStatus.setText("File Loaded");
            displayXML(xDoc);
        }
        
    }//GEN-LAST:event_cmdGoActionPerformed

    public boolean displayXML(Document xDoc) {
        // load the contents of the XML file specified in to the JTree panel
        // return false if no 
        boolean bReturn = false; 
        
        DefaultTreeModel dtModel = (DefaultTreeModel) jtXML.getModel();
        TreeNode nRoot = xRev.loadXMLView(xDoc);
        lblStatus.setText("Nodes Loaded");
        
        if (nRoot!=null) {
                
                dtModel.setRoot(nRoot);
                dtModel.reload();
                lblStatus.setText("Model reloaded");
        } else {
                lblStatus.setText(xRev.getMsg());
             
        }
        
        return bReturn;     
    }
    
    
    private Document createNewXML() {
        // create a new XML object to store the output 
        Document doc=null;
        
        String sFoldername = txtFilename.getText();
        String sRootElement = sFoldername.substring(sFoldername.lastIndexOf("\\")+1);
       
         // remove spaces 
         sRootElement = sRootElement.replaceAll(" ", "");
         
        try {
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

	// root elements
	doc = docBuilder.newDocument();
	Element rootElement = doc.createElement(sRootElement);
        doc.appendChild(rootElement);
        
        //Attr attr = doc.createAttribute("filename");
        //attr.setNodeValue(sOutputfilename);
        //rootElement.setAttributeNode(attr);
        	
        } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
        }
        
        return doc;
    }
    
    private boolean saveDocument(Document xDoc, String sDirname) {
        // save the new XML object to the filename specified 
        boolean bReturn = false;
        
        try {
                TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");
		DOMSource source = new DOMSource(xDoc);
                String sOutputfilename = "C:\\Users\\kkell\\Documents\\" + sDirname + ".xml";
		StreamResult result = new StreamResult(new File(sOutputfilename));		

		transformer.transform(source, result);
                bReturn = true; 
	  } catch (TransformerException tfe) {
		tfe.printStackTrace();
	  }
        
        return bReturn;
        
    }
    
    private int processFile (File file){
        // for each .dtsx file, create an instance of xmlFileMgr to retrieve the xDoc and then process it with 
        // an instance of XReview 
        int iQryCt = 0;
        
                    try { 
        
                        String sFilename = file.getCanonicalPath();
                        
                        if (sFilename.contains(".dtsx")) {
                                     
                            lblStatus.setText("Processing File: " + sFilename);
        
                            Document xDoc = xmlFileMgr.openXMLFile(sFilename);        
                            if (xDoc == null) {
                        //        lblStatus.setText(xmlFileMgr.getError());
                            } else {
                                 lblStatus.setText("File Loaded");
                                 
                                 sFilename = sFilename.substring(sFilename.lastIndexOf("\\")+1);
                                 
                                 xRev.setSourceFilename(sFilename);
            
                                // find the Source OLE DB component 
                                //xRev.getSourceNodes(xDoc, iNumQueries);            
                                iQryCt += xRev.findSourceNodes(xDoc);
                                
                            }
                        }
                        
                    } catch (IOException e) {
                            lblStatus.setText(e.getMessage());        
                        
                    }
        return iQryCt; 
    }
    
    private boolean createXMLOut() {
        // create a new XML document and assign it as the output for xRev
        boolean bReturn = false; 
        
        try {
            Document xOutput = createNewXML();
            xRev.setOutput(xOutput);
            bReturn = true;
        } catch(Exception e) {
            System.out.println(e.getMessage());
            lblStatus.setText(e.getMessage());
        }
        
        return bReturn;
    }
    
    private int ReadFilesInDir (String sDirname) {
        // loop through files in directory 
        // for each file - execute the processfile function 
        // for each directory found, recursively call this same function with the new directory name
        boolean bReturn = false; 
        int iQryCt = 0;
        
        File dir = new File(sDirname);
        
        File[] files = dir.listFiles();
        
        for (File subdir : files) {
            
            if (subdir.isDirectory()) {
        
                iQryCt += ReadFilesInDir(subdir.getPath());
                
            } else {
                if (subdir.isFile()) {
                     iQryCt += (processFile(subdir));
                        //lblStatus.setText("processed file:" + subdir.getName());
                        
                }
            }
        }
        
        return iQryCt; 
    }
    
    private void cmdGetSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGetSourceActionPerformed
        // write each source query in every file within the directory structure to the output file specified
        
         xRev.loadQry(true);
        
         createXMLOut();
         
         int iQryCt = ReadFilesInDir(txtFilename.getText());
         
         // get directory name to name output file 
         File dir = new File(txtFilename.getText());
         
         
         saveDocument(xRev.getOutput(), dir.getName());
          
          lblStatus.setText("Diretory processed.  Queries found: " + iQryCt);
        
    }//GEN-LAST:event_cmdGetSourceActionPerformed

    private void cmdGetFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGetFieldsActionPerformed
        // retrieve all of the query fields from the file specified or all of the files within 
        // the specified directory, including all subdirectories.  
        // Write all field values ot the output file 
        
        // set property of the review tool 
         xRev.loadQry(false);
         
         String sFolder = txtFilename.getText();
         
         // create output file
         if (createXMLOut()) {
            ReadFilesInDir(sFolder);
                    
            File dir = new File(sFolder);
           
            saveDocument(xRev.getOutput(), dir.getName());
         }
         
    }//GEN-LAST:event_cmdGetFieldsActionPerformed

    private void cmdSNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSNDActionPerformed
        // Seek and destroy.  
       
        // starting with QA directory
        File dir = new File("C:\\Visual Studio 2010\\Projects\\QA\\");
        
        // loop through all subdirectories to find direcctories that start with PersonalAuto
        File[] files = dir.listFiles();
        
        for (File subdir : files) {
            if (subdir.isDirectory()) {
                // for each directory 
                //     loop through all of the files in that directory to determine if a file named like '%PA_Load_pcst_PACost.dtsx'
                String sPACostFile = FindPACost(subdir);
                
                if (!sPACostFile.isEmpty()) {
                    // create an XMLFile object and then search for the old Text within that File
                    
                }
            }
        }
        
        
    }//GEN-LAST:event_cmdSNDActionPerformed

    private String FindPACost(File subdir) {
        // loop through the files contained in the directory to find files named like '%PA_Load_pcst_PACost.dtsx'
        // if a matching file is found then return the complete canonicalPath of that file
        File [] dFiles = subdir.listFiles();
        
        String sReturn = null;
        
        for (File contents : dFiles) {
            if (contents.isFile()) {
                
                try {
                    // if a file is found where the name matches PA_Load_pcst_PACost.dtsx then 
                    // search for the old text and replace it with the new text
                    String sFilename = contents.getCanonicalPath();
                        
                    if (sFilename.contains("PA_Load_pcst_PACost.dtsx")) {
                        sReturn = sFilename;
                        break;
                    }
                } catch (IOException e) {
                            lblStatus.setText(e.getMessage());         
                }
            }
        }
        
        return sReturn;
       
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdGetFields;
    private javax.swing.JButton cmdGetSource;
    private javax.swing.JButton cmdGo;
    private javax.swing.JButton cmdSND;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTree jtXML;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField newText;
    private javax.swing.JTextField oldText;
    private javax.swing.JPanel pnlCreate;
    private javax.swing.JPanel pnlFileSelector;
    private javax.swing.JLayeredPane pnlLayers;
    private javax.swing.JPanel pnlSND;
    private javax.swing.JPanel pnlSchema;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JPanel pnlTextSearch;
    private javax.swing.JPanel pnlXML;
    private javax.swing.JTextField txtFilename;
    // End of variables declaration//GEN-END:variables
}
